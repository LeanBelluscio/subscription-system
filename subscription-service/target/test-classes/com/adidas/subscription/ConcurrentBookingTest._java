/**
 * 
 */
package com.adidas.subscription;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import com.adidas.subscription.domain.Booking;
import com.adidas.subscription.service.BookingService;
import com.adidas.subscription.service.impl.BookingServiceImpl;

/**
 * @author leandrobelluscio
 *
 */
@SpringBootTest(classes = CampsiteApplication.class)
public class ConcurrentBookingTest extends AbstractTestNGSpringContextTests  {

	@Autowired
	private WebApplicationContext webApplicationContext;
	
	@Autowired
	private BookingService bookingService = new BookingServiceImpl();
	
	private MockMvc mockMvc;

	@BeforeClass
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
	}

	@Test(threadPoolSize = 500, invocationCount = 500, timeOut = 1000)
	public void concurrentBooking() throws Exception{
						Booking booking = new Booking();
						Calendar arrivalCalendar  = GregorianCalendar.getInstance();
						arrivalCalendar.setTime(new Date());
						arrivalCalendar.add(Calendar.DATE, 1);
						arrivalCalendar.set(Calendar.HOUR_OF_DAY, 12);
						arrivalCalendar.set(Calendar.MINUTE, 0);
						arrivalCalendar.set(Calendar.SECOND, 0);
						arrivalCalendar.set(Calendar.MILLISECOND, 0);
						booking.setArrivalDate(arrivalCalendar.getTime());
						Calendar departureCalendar  = GregorianCalendar.getInstance();
						departureCalendar.setTime(new Date());
						departureCalendar.add(Calendar.DATE, 3);
						departureCalendar.set(Calendar.HOUR_OF_DAY, 12);
						departureCalendar.set(Calendar.MINUTE, 0);
						departureCalendar.set(Calendar.SECOND, 0);
						departureCalendar.set(Calendar.MILLISECOND, 0);
						booking.setDepartureDate(departureCalendar.getTime());
						booking.setFullName("Test User");
						booking.setEmail("mail@mail.com");
						booking = bookingService.saveBooking(booking);
						System.out.println("Bokking id:" + booking.getId());
	}
}
